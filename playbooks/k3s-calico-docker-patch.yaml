---
- name: Патч K3s Calico кластера с Docker registry
  hosts: all
  become: true

  vars:
    docker_secret: "{{ docker_secret_name | default('docker-registry-secret') }}"
    docker_registry: "{{ ansible_docker_registry | default('registry.example.com') }}"
    docker_username: "{{ ansible_docker_username | default('username') }}"
    docker_password: "{{ ansible_docker_password | default('password') }}"
    docker_email: "{{ ansible_docker_email | default('user@example.com') }}"

  tasks:
    - name: Проверка запущен ли K3s
      shell: systemctl is-active k3s
      register: k3s_status
      ignore_errors: true

    - name: Остановка с ошибкой если K3s не запущен
      fail:
        msg: "Сервис K3s не запущен. Пожалуйста, сначала установите K3s."
      when: k3s_status.rc != 0

    - name: Настройка Kubeconfig
      shell: |
        mkdir -p ~/.kube
        cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        chown $(id -u):$(id -g) ~/.kube/config
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

    - name: Проверка установки Calico
      shell: kubectl get namespace calico-system
      register: calico_namespace
      ignore_errors: true

    - name: Остановка с ошибкой если namespace Calico не существует
      fail:
        msg: "Namespace Calico не найден. Пожалуйста, сначала установите Calico."
      when: calico_namespace.rc != 0

    - name: Удаление старых Docker Registry Secret
      shell: |
        kubectl delete secret {{ docker_secret }} -n calico-system --ignore-not-found=true
        kubectl delete secret {{ docker_secret }} -n kube-system --ignore-not-found=true
        kubectl delete secret {{ docker_secret }} -n default --ignore-not-found=true

    - name: Создание Docker Registry Secret в namespace calico-system
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=calico-system

    - name: Создание Docker Registry Secret в namespace kube-system
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=kube-system

    - name: Создание Docker Registry Secret в namespace default
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=default

    - name: Патчинг ServiceAccount для использования imagePullSecrets
      shell: |
        # Патчинг ServiceAccount в calico-system (где находятся все поды включая goldmane и whisker)
        kubectl patch serviceaccount default -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount calico-node -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount calico-kube-controllers -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount calico-typha -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount csi-node-driver -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true

        # Патчинг ServiceAccount для пользовательских приложений
        kubectl patch serviceaccount goldmane -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount whisker -n calico-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true

        # Патчинг ServiceAccount в других namespace
        kubectl patch serviceaccount default -n kube-system -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true
        kubectl patch serviceaccount default -n default -p '{"imagePullSecrets": [{"name": "{{ docker_secret }}"}]}' || true

    - name: Получение всех Deployments в namespace calico-system
      shell: kubectl get deployments -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_deployments
      ignore_errors: true

    - name: Создание временного JSON патч файла для Deployments
      copy:
        content: |
          {
            "spec": {
              "template": {
                "spec": {
                  "imagePullSecrets": [
                    {
                      "name": "{{ docker_secret }}"
                    }
                  ]
                }
              }
            }
          }
        dest: /tmp/deployment-patch.json
        mode: "0644"

    - name: Применение патча ко всем Deployments с image pull secret
      shell: |
        kubectl patch deployment {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_deployments.stdout.split() }}"
      ignore_errors: true
      when: calico_deployments.stdout != ""

    - name: Получение всех DaemonSets в namespace calico-system
      shell: kubectl get daemonsets -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_daemonsets
      ignore_errors: true

    - name: Применение патча ко всем DaemonSets с image pull secret
      shell: |
        kubectl patch daemonset {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_daemonsets.stdout.split() }}"
      ignore_errors: true
      when: calico_daemonsets.stdout != ""

    - name: Получение всех StatefulSets в namespace calico-system
      shell: kubectl get statefulsets -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_statefulsets
      ignore_errors: true

    - name: Применение патча ко всем StatefulSets с image pull secret
      shell: |
        kubectl patch statefulset {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_statefulsets.stdout.split() }}"
      ignore_errors: true
      when: calico_statefulsets.stdout != ""

    - name: Очистка временного патч файла
      file:
        path: /tmp/deployment-patch.json
        state: absent

    - name: Дополнительный патчинг goldmane и whisker (если они есть)
      shell: |
        # Проверяем есть ли goldmane и whisker, и патчим их отдельно
        if kubectl get deployment goldmane -n calico-system >/dev/null 2>&1; then
          echo "Патчинг goldmane deployment..."
          kubectl patch deployment goldmane -n calico-system -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"{{ docker_secret }}"}]}}}}'
        fi

        if kubectl get deployment whisker -n calico-system >/dev/null 2>&1; then
          echo "Патчинг whisker deployment..."
          kubectl patch deployment whisker -n calico-system -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"{{ docker_secret }}"}]}}}}'
        fi
      ignore_errors: true

    - name: Перезапуск всех Deployments в calico-system
      shell: |
        kubectl rollout restart deployment {{ item }} -n calico-system
      loop: "{{ calico_deployments.stdout.split() }}"
      ignore_errors: true
      when: calico_deployments.stdout != ""

    - name: Перезапуск всех DaemonSets в calico-system
      shell: |
        kubectl rollout restart daemonset {{ item }} -n calico-system
      loop: "{{ calico_daemonsets.stdout.split() }}"
      ignore_errors: true
      when: calico_daemonsets.stdout != ""

    - name: Перезапуск всех StatefulSets в calico-system
      shell: |
        kubectl rollout restart statefulset {{ item }} -n calico-system
      loop: "{{ calico_statefulsets.stdout.split() }}"
      ignore_errors: true
      when: calico_statefulsets.stdout != ""

    - name: Принудительное удаление проблемных подов goldmane и whisker
      shell: |
        # Удаляем все поды goldmane и whisker для их пересоздания с новыми секретами
        kubectl delete pod -n calico-system -l app=goldmane --ignore-not-found=true
        kubectl delete pod -n calico-system -l app=whisker --ignore-not-found=true

        # Также попробуем удалить по другим селекторам
        kubectl get pods -n calico-system | grep goldmane | awk '{print $1}' | xargs -r kubectl delete pod -n calico-system
        kubectl get pods -n calico-system | grep whisker | awk '{print $1}' | xargs -r kubectl delete pod -n calico-system
      ignore_errors: true

    - name: Ожидание готовности всех подов после перезапуска
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/part-of=calico -n calico-system --timeout=600s
      ignore_errors: true

    - name: Ожидание готовности calico-node подов
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n calico-system --timeout=600s
      ignore_errors: true

    - name: Ожидание готовности calico-kube-controllers подов
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-kube-controllers -n calico-system --timeout=600s
      ignore_errors: true

    - name: Ожидание готовности calico-typha подов
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-typha -n calico-system --timeout=600s
      ignore_errors: true

    - name: Отображение финального статуса
      shell: |
        echo "=== Финальный Статус ==="
        echo "=== Поды Calico System ==="
        kubectl get pods -n calico-system
        echo "=== Поды Kube System ==="
        kubectl get pods -n kube-system
        echo "=== Поды Default Namespace ==="
        kubectl get pods -n default
        echo "=== Статус Docker Secret ==="
        echo "Calico System:"
        kubectl get secret {{ docker_secret }} -n calico-system
        echo "Kube System:"
        kubectl get secret {{ docker_secret }} -n kube-system
        echo "Default:"
        kubectl get secret {{ docker_secret }} -n default
        echo "=== Все Ресурсы в calico-system ==="
        kubectl get all -n calico-system
