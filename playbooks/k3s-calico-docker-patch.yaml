---
- name: Patch K3s Calico cluster with Docker registry
  hosts: all
  become: true

  vars:
    docker_secret: "{{ docker_secret_name | default('docker-registry-secret') }}"
    docker_registry: "{{ ansible_docker_registry | default('registry.example.com') }}"
    docker_username: "{{ ansible_docker_username | default('username') }}"
    docker_password: "{{ ansible_docker_password | default('password') }}"
    docker_email: "{{ ansible_docker_email | default('user@example.com') }}"

  tasks:
    - name: Check if K3s is running
      shell: systemctl is-active k3s
      register: k3s_status
      ignore_errors: true

    - name: Fail if K3s is not running
      fail:
        msg: "K3s service is not running. Please install K3s first."
      when: k3s_status.rc != 0

    - name: Set Kubeconfig
      shell: |
        mkdir -p ~/.kube
        cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        chown $(id -u):$(id -g) ~/.kube/config
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

    - name: Check if Calico is installed
      shell: kubectl get namespace calico-system
      register: calico_namespace
      ignore_errors: true

    - name: Fail if Calico namespace doesn't exist
      fail:
        msg: "Calico namespace not found. Please install Calico first."
      when: calico_namespace.rc != 0

    - name: Create Docker Registry Secret in calico-system namespace
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=calico-system
      ignore_errors: true

    - name: Create Docker Registry Secret in default namespace
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=default
      ignore_errors: true

    - name: Create Docker Registry Secret in kube-system namespace
      shell: |
        kubectl create secret docker-registry {{ docker_secret }} \
          --docker-server={{ docker_registry }} \
          --docker-username={{ docker_username }} \
          --docker-password={{ docker_password }} \
          --docker-email={{ docker_email }} \
          --namespace=kube-system
      ignore_errors: true

    - name: Get all Deployments in calico-system namespace
      shell: kubectl get deployments -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_deployments
      ignore_errors: true

    - name: Create temporary JSON patch file for Deployments
      copy:
        content: |
          {
            "spec": {
              "template": {
                "spec": {
                  "imagePullSecrets": [
                    {
                      "name": "{{ docker_secret }}"
                    }
                  ]
                }
              }
            }
          }
        dest: /tmp/deployment-patch.json
        mode: "0644"

    - name: Patch all Deployments with image pull secret
      shell: |
        kubectl patch deployment {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_deployments.stdout.split() }}"
      ignore_errors: true
      when: calico_deployments.stdout != ""

    - name: Get all DaemonSets in calico-system namespace
      shell: kubectl get daemonsets -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_daemonsets
      ignore_errors: true

    - name: Patch all DaemonSets with image pull secret
      shell: |
        kubectl patch daemonset {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_daemonsets.stdout.split() }}"
      ignore_errors: true
      when: calico_daemonsets.stdout != ""

    - name: Get all StatefulSets in calico-system namespace
      shell: kubectl get statefulsets -n calico-system -o jsonpath='{.items[*].metadata.name}'
      register: calico_statefulsets
      ignore_errors: true

    - name: Patch all StatefulSets with image pull secret
      shell: |
        kubectl patch statefulset {{ item }} -n calico-system --patch-file /tmp/deployment-patch.json
      loop: "{{ calico_statefulsets.stdout.split() }}"
      ignore_errors: true
      when: calico_statefulsets.stdout != ""

    - name: Clean up temporary patch file
      file:
        path: /tmp/deployment-patch.json
        state: absent

    - name: Restart all Deployments in calico-system
      shell: |
        kubectl rollout restart deployment {{ item }} -n calico-system
      loop: "{{ calico_deployments.stdout.split() }}"
      ignore_errors: true
      when: calico_deployments.stdout != ""

    - name: Restart all DaemonSets in calico-system
      shell: |
        kubectl rollout restart daemonset {{ item }} -n calico-system
      loop: "{{ calico_daemonsets.stdout.split() }}"
      ignore_errors: true
      when: calico_daemonsets.stdout != ""

    - name: Restart all StatefulSets in calico-system
      shell: |
        kubectl rollout restart statefulset {{ item }} -n calico-system
      loop: "{{ calico_statefulsets.stdout.split() }}"
      ignore_errors: true
      when: calico_statefulsets.stdout != ""

    - name: Wait for all pods to be ready after restart
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/part-of=calico -n calico-system --timeout=600s
      ignore_errors: true

    - name: Wait for calico-node pods to be ready
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n calico-system --timeout=600s
      ignore_errors: true

    - name: Wait for calico-kube-controllers pods to be ready
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-kube-controllers -n calico-system --timeout=600s
      ignore_errors: true

    - name: Wait for calico-typha pods to be ready
      shell: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-typha -n calico-system --timeout=600s
      ignore_errors: true

    - name: Display final status
      shell: |
        echo "=== Final Status ==="
        echo "=== Calico System Pods ==="
        kubectl get pods -n calico-system
        echo "=== Kube System Pods ==="
        kubectl get pods -n kube-system
        echo "=== Default Namespace Pods ==="
        kubectl get pods -n default
        echo "=== Docker Secret Status ==="
        echo "Calico System:"
        kubectl get secret {{ docker_secret }} -n calico-system
        echo "Kube System:"
        kubectl get secret {{ docker_secret }} -n kube-system
        echo "Default:"
        kubectl get secret {{ docker_secret }} -n default
        echo "=== All Resources in calico-system ==="
        kubectl get all -n calico-system
